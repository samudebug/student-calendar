services:
  test:
    build:
      context: .
      dockerfile: test.Dockerfile
    environment:
      NODE_ENV: test
      PORT: 3333
      HOST: server
      FIREBASE_AUTH_HOST: http://firebase:9099
    depends_on:
      server:
        condition: service_started
  firebase:
    hostname: firebase
    build:
      context: .
      dockerfile: firebase.Dockerfile
    expose:
      - 9099
    ports:
      - 9099:9099 # **AUTH_PORT**
  server:
    build:
      context: .
      args:
        FIREBASE_SERVICE_ACCOUNT: ${FIREBASE_SERVICE_ACCOUNT}
        DATABASE_URL: ${DATABASE_URL}
        BASE_URL: ${BASE_URL}
        GOOGLE_CLOUD_PROJECT: ${GOOGLE_CLOUD_PROJECT}
        CLOUD_TASKS_QUEUE: ${CLOUD_TASKS_QUEUE}
        GOOGLE_CLOUD_LOCATION: ${GOOGLE_CLOUD_LOCATION}
        API_KEY: ${API_KEY}

    environment:
      NODE_ENV: test
      PORT: 3333
      FIREBASE_AUTH_EMULATOR_HOST: firebase:9099
    ports:
      - 3333:3333
    expose:
      - 3333
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3333/api"]
      interval: 5s
      timeout: 10s
      retries: 15
    hostname: server
    depends_on:
      mongo:
        condition: service_started
      firebase:
        condition: service_started
  # This config is for MongoDB v4
  # It's a Replica Set (required for Prisma Client)
  mongo:
    build:
      context: ./mongodb_replica
      args:
        MONGO_VERSION: 4
    environment:
      MONGO_REPLICA_HOST: 127.0.0.1
      MONGO_REPLICA_PORT: 27017
      # Use "mongosh" instead of "mongo" for v5+
      MONGO_COMMAND: "mongo"
    expose:
      - 27017
    restart: unless-stopped
    hostname: db-server
    healthcheck:
      # Use "mongosh" instead of "mongo" for v5+
      test:
        [
          "CMD",
          "mongo",
          "admin",
          "--port",
          "27017",
          "--eval",
          "db.adminCommand('ping').ok",
        ]
      interval: 5s
      timeout: 2s
      retries: 20
